plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.18.4'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
}

group = 'cleanie'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.11"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-parameters')
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Database Driver
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    // Devtools and Lombok
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    // test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2'

    // Infrastructure
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // etc
    implementation 'io.github.vaneproject:badwordfiltering:1.0.0'
}

ext {
    snippetsDir = file('build/generated-snippets')
    openApiDir = file("${layout.buildDirectory.get()}/resources/main/static/docs")
}

tasks.register('createDocsDir') {
    doLast {
        openApiDir.mkdirs()
        file("src/main/resources/static/docs").mkdirs()
    }
}

openapi3 {
    server = 'https://api.re-patch.com'
    title = 'Repatch API 문서'
    description = 'Spring REST Docs로 생성한 API 문서입니다.'
    version = '1.0.0'
    outputDirectory = file("${layout.buildDirectory.get()}/resources/main/static/docs")
    outputFileNamePrefix = 'openapi3'
    format = 'yaml'
}

tasks.withType(com.epages.restdocs.apispec.gradle.OpenApi3Task).configureEach {
    dependsOn createDocsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
    sourceDir file('src/docs/asciidoc')
    outputDir file("${layout.buildDirectory.get()}/docs/asciidoc")
}

tasks.register('generateOpenApi') {
    dependsOn test
    dependsOn 'openapi3'
    group = 'documentation'
    doLast {
        copy {
            from openApiDir
            into "src/main/resources/static/docs"
            include "openapi3.yaml"
        }
    }
}

tasks.named('build') {
    dependsOn asciidoctor
    dependsOn generateOpenApi
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.register('ciTest', Test) {
    useJUnitPlatform() {
        includeTags 'unit', 'acceptance'
        excludeTags 'integration'
    }

    reports {
        junitXml.required.set(true)
        html.required.set(false)
    }
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(false)
    }
}

sonar {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.gradle.skipCompile", "true"
        property "sonar.projectKey", "teamCleanie_ReFabBE"
        property "sonar.organization", "teamcleanie"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.branch.name", "main"
        property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory.get()}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${layout.buildDirectory.get()}/test-results/test"
        property "sonar.alm.enabled", "false"
    }
}

tasks.named("clean") {
    doLast {
        delete "${layout.buildDirectory.get()}/resources/main/static/docs"
    }
}

